// <auto-generated> - Template:WebApiDataServiceInterface, Version:2021.11.9, Id:fb79d688-1931-4893-82f6-b7ad98bc5754
using ArtistSite.Shared.DataService;
using System;
using System.Collections.Generic;
using System.Threading.Tasks;
using Enums = ArtistSite.Shared.Constants.Enums;
using xDTO = ArtistSite.Shared.DTO;

namespace ArtistSite.App.Services
{
	public partial interface IWebApiDataServiceAS : IWebApiDataServiceBase
	{

		#region GetAllPages

		Task<IList<xDTO.Artist>> GetAllPagesArtistsAsync(bool? isActive = null, string sort = null,
			Enums.RelatedEntitiesType relatedEntitiesType = Enums.RelatedEntitiesType.None);

		Task<IList<xDTO.Artist>> GetAllPagesArtistsAsync(List<IFilterCriterion> filterCriteria, string sort = null,
			Enums.RelatedEntitiesType relatedEntitiesType = Enums.RelatedEntitiesType.None);

		Task<IList<xDTO.Artwork>> GetAllPagesArtworksAsync(bool? isActive = null, string sort = null,
			Enums.RelatedEntitiesType relatedEntitiesType = Enums.RelatedEntitiesType.None);

		Task<IList<xDTO.Artwork>> GetAllPagesArtworksAsync(List<IFilterCriterion> filterCriteria, string sort = null,
			Enums.RelatedEntitiesType relatedEntitiesType = Enums.RelatedEntitiesType.None);

		Task<IList<xDTO.ArtworkCategoryXref>> GetAllPagesArtworkCategoryXrefsAsync(bool? isActive = null, string sort = null,
			Enums.RelatedEntitiesType relatedEntitiesType = Enums.RelatedEntitiesType.None);

		Task<IList<xDTO.ArtworkCategoryXref>> GetAllPagesArtworkCategoryXrefsAsync(List<IFilterCriterion> filterCriteria, string sort = null,
			Enums.RelatedEntitiesType relatedEntitiesType = Enums.RelatedEntitiesType.None);

		Task<IList<xDTO.ArtworkMediumXref>> GetAllPagesArtworkMediumXrefsAsync(bool? isActive = null, string sort = null,
			Enums.RelatedEntitiesType relatedEntitiesType = Enums.RelatedEntitiesType.None);

		Task<IList<xDTO.ArtworkMediumXref>> GetAllPagesArtworkMediumXrefsAsync(List<IFilterCriterion> filterCriteria, string sort = null,
			Enums.RelatedEntitiesType relatedEntitiesType = Enums.RelatedEntitiesType.None);

		Task<IList<xDTO.Category>> GetAllPagesCategoriesAsync(bool? isActive = null, string sort = null,
			Enums.RelatedEntitiesType relatedEntitiesType = Enums.RelatedEntitiesType.None);

		Task<IList<xDTO.Category>> GetAllPagesCategoriesAsync(List<IFilterCriterion> filterCriteria, string sort = null,
			Enums.RelatedEntitiesType relatedEntitiesType = Enums.RelatedEntitiesType.None);

		Task<IList<xDTO.Medium>> GetAllPagesMediaAsync(bool? isActive = null, string sort = null,
			Enums.RelatedEntitiesType relatedEntitiesType = Enums.RelatedEntitiesType.None);

		Task<IList<xDTO.Medium>> GetAllPagesMediaAsync(List<IFilterCriterion> filterCriteria, string sort = null,
			Enums.RelatedEntitiesType relatedEntitiesType = Enums.RelatedEntitiesType.None);

		Task<IList<xDTO.NewsItem>> GetAllPagesNewsItemsAsync(bool? isActive = null, string sort = null,
			Enums.RelatedEntitiesType relatedEntitiesType = Enums.RelatedEntitiesType.None);

		Task<IList<xDTO.NewsItem>> GetAllPagesNewsItemsAsync(List<IFilterCriterion> filterCriteria, string sort = null,
			Enums.RelatedEntitiesType relatedEntitiesType = Enums.RelatedEntitiesType.None);

		#endregion

		#region GetPageData

		Task<IHttpCallResultCGHT<IPageDataT<IList<xDTO.Artist>>>> GetArtistsAsync(IPageDataRequest pageDataRequest);

		Task<IHttpCallResultCGHT<IPageDataT<IList<xDTO.Artist>>>> GetArtistsAsync(
			List<IFilterCriterion> filterCriteria, string sort = null, int page = 1, int pageSize = 100,
			Enums.RelatedEntitiesType relatedEntitiesType = Enums.RelatedEntitiesType.None);

		Task<IHttpCallResultCGHT<IPageDataT<IList<xDTO.Artist>>>> GetArtistsAsync(
			bool? isActive = null, string sort = null, int page = 1, int pageSize = 100,
			Enums.RelatedEntitiesType relatedEntitiesType = Enums.RelatedEntitiesType.None);

		Task<IHttpCallResultCGHT<IPageDataT<IList<xDTO.Artwork>>>> GetArtworksAsync(IPageDataRequest pageDataRequest);

		Task<IHttpCallResultCGHT<IPageDataT<IList<xDTO.Artwork>>>> GetArtworksAsync(
			List<IFilterCriterion> filterCriteria, string sort = null, int page = 1, int pageSize = 100,
			Enums.RelatedEntitiesType relatedEntitiesType = Enums.RelatedEntitiesType.None);

		Task<IHttpCallResultCGHT<IPageDataT<IList<xDTO.Artwork>>>> GetArtworksAsync(
			bool? isActive = null, string sort = null, int page = 1, int pageSize = 100,
			Enums.RelatedEntitiesType relatedEntitiesType = Enums.RelatedEntitiesType.None);

		Task<IHttpCallResultCGHT<IPageDataT<IList<xDTO.ArtworkCategoryXref>>>> GetArtworkCategoryXrefsAsync(IPageDataRequest pageDataRequest);

		Task<IHttpCallResultCGHT<IPageDataT<IList<xDTO.ArtworkCategoryXref>>>> GetArtworkCategoryXrefsAsync(
			List<IFilterCriterion> filterCriteria, string sort = null, int page = 1, int pageSize = 100,
			Enums.RelatedEntitiesType relatedEntitiesType = Enums.RelatedEntitiesType.None);

		Task<IHttpCallResultCGHT<IPageDataT<IList<xDTO.ArtworkCategoryXref>>>> GetArtworkCategoryXrefsAsync(
			bool? isActive = null, string sort = null, int page = 1, int pageSize = 100,
			Enums.RelatedEntitiesType relatedEntitiesType = Enums.RelatedEntitiesType.None);

		Task<IHttpCallResultCGHT<IPageDataT<IList<xDTO.ArtworkMediumXref>>>> GetArtworkMediumXrefsAsync(IPageDataRequest pageDataRequest);

		Task<IHttpCallResultCGHT<IPageDataT<IList<xDTO.ArtworkMediumXref>>>> GetArtworkMediumXrefsAsync(
			List<IFilterCriterion> filterCriteria, string sort = null, int page = 1, int pageSize = 100,
			Enums.RelatedEntitiesType relatedEntitiesType = Enums.RelatedEntitiesType.None);

		Task<IHttpCallResultCGHT<IPageDataT<IList<xDTO.ArtworkMediumXref>>>> GetArtworkMediumXrefsAsync(
			bool? isActive = null, string sort = null, int page = 1, int pageSize = 100,
			Enums.RelatedEntitiesType relatedEntitiesType = Enums.RelatedEntitiesType.None);

		Task<IHttpCallResultCGHT<IPageDataT<IList<xDTO.Category>>>> GetCategoriesAsync(IPageDataRequest pageDataRequest);

		Task<IHttpCallResultCGHT<IPageDataT<IList<xDTO.Category>>>> GetCategoriesAsync(
			List<IFilterCriterion> filterCriteria, string sort = null, int page = 1, int pageSize = 100,
			Enums.RelatedEntitiesType relatedEntitiesType = Enums.RelatedEntitiesType.None);

		Task<IHttpCallResultCGHT<IPageDataT<IList<xDTO.Category>>>> GetCategoriesAsync(
			bool? isActive = null, string sort = null, int page = 1, int pageSize = 100,
			Enums.RelatedEntitiesType relatedEntitiesType = Enums.RelatedEntitiesType.None);

		Task<IHttpCallResultCGHT<IPageDataT<IList<xDTO.Medium>>>> GetMediaAsync(IPageDataRequest pageDataRequest);

		Task<IHttpCallResultCGHT<IPageDataT<IList<xDTO.Medium>>>> GetMediaAsync(
			List<IFilterCriterion> filterCriteria, string sort = null, int page = 1, int pageSize = 100,
			Enums.RelatedEntitiesType relatedEntitiesType = Enums.RelatedEntitiesType.None);

		Task<IHttpCallResultCGHT<IPageDataT<IList<xDTO.Medium>>>> GetMediaAsync(
			bool? isActive = null, string sort = null, int page = 1, int pageSize = 100,
			Enums.RelatedEntitiesType relatedEntitiesType = Enums.RelatedEntitiesType.None);

		Task<IHttpCallResultCGHT<IPageDataT<IList<xDTO.NewsItem>>>> GetNewsItemsAsync(IPageDataRequest pageDataRequest);

		Task<IHttpCallResultCGHT<IPageDataT<IList<xDTO.NewsItem>>>> GetNewsItemsAsync(
			List<IFilterCriterion> filterCriteria, string sort = null, int page = 1, int pageSize = 100,
			Enums.RelatedEntitiesType relatedEntitiesType = Enums.RelatedEntitiesType.None);

		Task<IHttpCallResultCGHT<IPageDataT<IList<xDTO.NewsItem>>>> GetNewsItemsAsync(
			bool? isActive = null, string sort = null, int page = 1, int pageSize = 100,
			Enums.RelatedEntitiesType relatedEntitiesType = Enums.RelatedEntitiesType.None);

		#endregion

		#region Get By PK

		Task<IHttpCallResultCGHT<xDTO.Artist>> GetArtistAsync(int artistId,
			Enums.RelatedEntitiesType relatedEntitiesType = Enums.RelatedEntitiesType.None);

		Task<IHttpCallResultCGHT<xDTO.Artwork>> GetArtworkAsync(int artworkId,
			Enums.RelatedEntitiesType relatedEntitiesType = Enums.RelatedEntitiesType.None);

		Task<IHttpCallResultCGHT<xDTO.ArtworkCategoryXref>> GetArtworkCategoryXrefAsync(int artworkId, int categoryId,
			Enums.RelatedEntitiesType relatedEntitiesType = Enums.RelatedEntitiesType.None);

		Task<IHttpCallResultCGHT<xDTO.ArtworkMediumXref>> GetArtworkMediumXrefAsync(int artworkId, int mediumId,
			Enums.RelatedEntitiesType relatedEntitiesType = Enums.RelatedEntitiesType.None);

		Task<IHttpCallResultCGHT<xDTO.Category>> GetCategoryAsync(int categoryId,
			Enums.RelatedEntitiesType relatedEntitiesType = Enums.RelatedEntitiesType.None);

		Task<IHttpCallResultCGHT<xDTO.Medium>> GetMediumAsync(int mediumId,
			Enums.RelatedEntitiesType relatedEntitiesType = Enums.RelatedEntitiesType.None);

		Task<IHttpCallResultCGHT<xDTO.NewsItem>> GetNewsItemAsync(int newsItemId,
			Enums.RelatedEntitiesType relatedEntitiesType = Enums.RelatedEntitiesType.None);

		#endregion

		#region Create

		Task<IHttpCallResultCGHT<xDTO.Artist>> CreateArtistAsync(xDTO.Artist item);

		Task<IHttpCallResultCGHT<xDTO.Artwork>> CreateArtworkAsync(xDTO.Artwork item);

		Task<IHttpCallResultCGHT<xDTO.ArtworkCategoryXref>> CreateArtworkCategoryXrefAsync(xDTO.ArtworkCategoryXref item);

		Task<IHttpCallResultCGHT<xDTO.ArtworkMediumXref>> CreateArtworkMediumXrefAsync(xDTO.ArtworkMediumXref item);

		Task<IHttpCallResultCGHT<xDTO.Category>> CreateCategoryAsync(xDTO.Category item);

		Task<IHttpCallResultCGHT<xDTO.Medium>> CreateMediumAsync(xDTO.Medium item);

		Task<IHttpCallResultCGHT<xDTO.NewsItem>> CreateNewsItemAsync(xDTO.NewsItem item);

		#endregion

		#region Update

		Task<IHttpCallResultCGHT<xDTO.Artist>> UpdateArtistAsync(xDTO.Artist item);

		Task<IHttpCallResultCGHT<xDTO.Artwork>> UpdateArtworkAsync(xDTO.Artwork item);

		Task<IHttpCallResultCGHT<xDTO.ArtworkCategoryXref>> UpdateArtworkCategoryXrefAsync(xDTO.ArtworkCategoryXref item);

		Task<IHttpCallResultCGHT<xDTO.ArtworkMediumXref>> UpdateArtworkMediumXrefAsync(xDTO.ArtworkMediumXref item);

		Task<IHttpCallResultCGHT<xDTO.Category>> UpdateCategoryAsync(xDTO.Category item);

		Task<IHttpCallResultCGHT<xDTO.Medium>> UpdateMediumAsync(xDTO.Medium item);

		Task<IHttpCallResultCGHT<xDTO.NewsItem>> UpdateNewsItemAsync(xDTO.NewsItem item);

#endregion
		#region Delete

		Task<IHttpCallResultCGHT<xDTO.Artist>> DeleteArtistAsync(int artistId);

		Task<IHttpCallResultCGHT<xDTO.Artwork>> DeleteArtworkAsync(int artworkId);

		Task<IHttpCallResultCGHT<xDTO.ArtworkCategoryXref>> DeleteArtworkCategoryXrefAsync(int artworkId, int categoryId);

		Task<IHttpCallResultCGHT<xDTO.ArtworkMediumXref>> DeleteArtworkMediumXrefAsync(int artworkId, int mediumId);

		Task<IHttpCallResultCGHT<xDTO.Category>> DeleteCategoryAsync(int categoryId);

		Task<IHttpCallResultCGHT<xDTO.Medium>> DeleteMediumAsync(int mediumId);

		Task<IHttpCallResultCGHT<xDTO.NewsItem>> DeleteNewsItemAsync(int newsItemId);

		#endregion

	}
}
