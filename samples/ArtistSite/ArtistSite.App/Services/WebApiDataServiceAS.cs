// <auto-generated> - Template:WebApiDataService, Version:2022.06.21, Id:da87d00b-525f-487a-934a-0925a3f99db9
using System;
using System.Collections.Generic;
using System.Net.Http;
using System.Threading.Tasks;
using Microsoft.Extensions.Logging;
using ArtistSite.Shared.DataService;
using Enums = ArtistSite.Shared.Constants.Enums;
using xDTO = ArtistSite.Shared.DTO;

namespace ArtistSite.App.Services
{
	public partial class WebApiDataServiceAS : WebApiDataServiceBase, IWebApiDataServiceAS
	{

		public WebApiDataServiceAS(ILogger<WebApiDataServiceAS> logger,
			IHttpClientFactory httpClientFactory,
			ISerializationHelper serializationHelper)
			: base(logger, serializationHelper, httpClientFactory,
				isServiceOnlineRelativeUrl: "api/AS/ASApiStatus")
		{
		}

		#region GetAllPages

		public async Task<IList<xDTO.Artist>> GetAllPagesArtistsAsync(
			bool? isActive, string sort,
			Enums.RelatedEntitiesType relatedEntitiesType)
		{
				List<IFilterCriterion> filterCriteria = new List<IFilterCriterion>();

				var retVal = await GetAllPagesArtistsAsync(filterCriteria, sort, relatedEntitiesType);
				return retVal;
		}

		public async Task<IList<xDTO.Artist>> GetAllPagesArtistsAsync(
			List<IFilterCriterion> filterCriteria, string sort,
			Enums.RelatedEntitiesType relatedEntitiesType)
		{
				IPageDataRequest pageDataRequest = new PageDataRequest(filterCriteria: filterCriteria, sort: sort, page: 1, pageSize: 100, relatedEntitiesType: relatedEntitiesType);

				var retVal = await GetAllPageDataResultsAsync(pageDataRequest, GetArtistsAsync);
				return retVal;
		}

		public async Task<IList<xDTO.Artwork>> GetAllPagesArtworksAsync(
			bool? isActive, string sort,
			Enums.RelatedEntitiesType relatedEntitiesType)
		{
				List<IFilterCriterion> filterCriteria = new List<IFilterCriterion>();

				var retVal = await GetAllPagesArtworksAsync(filterCriteria, sort, relatedEntitiesType);
				return retVal;
		}

		public async Task<IList<xDTO.Artwork>> GetAllPagesArtworksAsync(
			List<IFilterCriterion> filterCriteria, string sort,
			Enums.RelatedEntitiesType relatedEntitiesType)
		{
				IPageDataRequest pageDataRequest = new PageDataRequest(filterCriteria: filterCriteria, sort: sort, page: 1, pageSize: 100, relatedEntitiesType: relatedEntitiesType);

				var retVal = await GetAllPageDataResultsAsync(pageDataRequest, GetArtworksAsync);
				return retVal;
		}

		public async Task<IList<xDTO.ArtworkCategoryXref>> GetAllPagesArtworkCategoryXrefsAsync(
			bool? isActive, string sort,
			Enums.RelatedEntitiesType relatedEntitiesType)
		{
				List<IFilterCriterion> filterCriteria = new List<IFilterCriterion>();

				var retVal = await GetAllPagesArtworkCategoryXrefsAsync(filterCriteria, sort, relatedEntitiesType);
				return retVal;
		}

		public async Task<IList<xDTO.ArtworkCategoryXref>> GetAllPagesArtworkCategoryXrefsAsync(
			List<IFilterCriterion> filterCriteria, string sort,
			Enums.RelatedEntitiesType relatedEntitiesType)
		{
				IPageDataRequest pageDataRequest = new PageDataRequest(filterCriteria: filterCriteria, sort: sort, page: 1, pageSize: 100, relatedEntitiesType: relatedEntitiesType);

				var retVal = await GetAllPageDataResultsAsync(pageDataRequest, GetArtworkCategoryXrefsAsync);
				return retVal;
		}

		public async Task<IList<xDTO.ArtworkMediumXref>> GetAllPagesArtworkMediumXrefsAsync(
			bool? isActive, string sort,
			Enums.RelatedEntitiesType relatedEntitiesType)
		{
				List<IFilterCriterion> filterCriteria = new List<IFilterCriterion>();

				var retVal = await GetAllPagesArtworkMediumXrefsAsync(filterCriteria, sort, relatedEntitiesType);
				return retVal;
		}

		public async Task<IList<xDTO.ArtworkMediumXref>> GetAllPagesArtworkMediumXrefsAsync(
			List<IFilterCriterion> filterCriteria, string sort,
			Enums.RelatedEntitiesType relatedEntitiesType)
		{
				IPageDataRequest pageDataRequest = new PageDataRequest(filterCriteria: filterCriteria, sort: sort, page: 1, pageSize: 100, relatedEntitiesType: relatedEntitiesType);

				var retVal = await GetAllPageDataResultsAsync(pageDataRequest, GetArtworkMediumXrefsAsync);
				return retVal;
		}

		public async Task<IList<xDTO.Category>> GetAllPagesCategoriesAsync(
			bool? isActive, string sort,
			Enums.RelatedEntitiesType relatedEntitiesType)
		{
				List<IFilterCriterion> filterCriteria = new List<IFilterCriterion>();

				var retVal = await GetAllPagesCategoriesAsync(filterCriteria, sort, relatedEntitiesType);
				return retVal;
		}

		public async Task<IList<xDTO.Category>> GetAllPagesCategoriesAsync(
			List<IFilterCriterion> filterCriteria, string sort,
			Enums.RelatedEntitiesType relatedEntitiesType)
		{
				IPageDataRequest pageDataRequest = new PageDataRequest(filterCriteria: filterCriteria, sort: sort, page: 1, pageSize: 100, relatedEntitiesType: relatedEntitiesType);

				var retVal = await GetAllPageDataResultsAsync(pageDataRequest, GetCategoriesAsync);
				return retVal;
		}

		public async Task<IList<xDTO.Medium>> GetAllPagesMediaAsync(
			bool? isActive, string sort,
			Enums.RelatedEntitiesType relatedEntitiesType)
		{
				List<IFilterCriterion> filterCriteria = new List<IFilterCriterion>();

				var retVal = await GetAllPagesMediaAsync(filterCriteria, sort, relatedEntitiesType);
				return retVal;
		}

		public async Task<IList<xDTO.Medium>> GetAllPagesMediaAsync(
			List<IFilterCriterion> filterCriteria, string sort,
			Enums.RelatedEntitiesType relatedEntitiesType)
		{
				IPageDataRequest pageDataRequest = new PageDataRequest(filterCriteria: filterCriteria, sort: sort, page: 1, pageSize: 100, relatedEntitiesType: relatedEntitiesType);

				var retVal = await GetAllPageDataResultsAsync(pageDataRequest, GetMediaAsync);
				return retVal;
		}

		public async Task<IList<xDTO.NewsItem>> GetAllPagesNewsItemsAsync(
			bool? isActive, string sort,
			Enums.RelatedEntitiesType relatedEntitiesType)
		{
				List<IFilterCriterion> filterCriteria = new List<IFilterCriterion>();

				var retVal = await GetAllPagesNewsItemsAsync(filterCriteria, sort, relatedEntitiesType);
				return retVal;
		}

		public async Task<IList<xDTO.NewsItem>> GetAllPagesNewsItemsAsync(
			List<IFilterCriterion> filterCriteria, string sort,
			Enums.RelatedEntitiesType relatedEntitiesType)
		{
				IPageDataRequest pageDataRequest = new PageDataRequest(filterCriteria: filterCriteria, sort: sort, page: 1, pageSize: 100, relatedEntitiesType: relatedEntitiesType);

				var retVal = await GetAllPageDataResultsAsync(pageDataRequest, GetNewsItemsAsync);
				return retVal;
		}

		#endregion

		#region GetOnePage

		public async Task<IHttpCallResultCGHT<IPageDataT<IList<xDTO.Artist>>>> GetArtistsAsync(IPageDataRequest pageDataRequest)
		{
				List<string> filter = BuildFilter(pageDataRequest.FilterCriteria);

				string requestUrl = $"api/AS/Artist/{(int)pageDataRequest.RelatedEntitiesType}/";
				var retVal = await SerializationHelper.SerializeCallResultsGet<IList<xDTO.Artist>>(
					Log, HttpClient, requestUrl,
					filter: filter,
					sort: pageDataRequest.Sort,
					page: pageDataRequest.Page,
					pageSize: pageDataRequest.PageSize);

				return retVal;
		}

		public async Task<IHttpCallResultCGHT<IPageDataT<IList<xDTO.Artist>>>> GetArtistsAsync(
			bool? isActive, string sort, int page, int pageSize,
			Enums.RelatedEntitiesType relatedEntitiesType)
		{
				List<IFilterCriterion> filterCriteria = new List<IFilterCriterion>();

				var retVal = await GetArtistsAsync(filterCriteria, sort, page, pageSize, relatedEntitiesType);
				return retVal;
		}

		public async Task<IHttpCallResultCGHT<IPageDataT<IList<xDTO.Artist>>>> GetArtistsAsync(
			List<IFilterCriterion> filterCriteria, string sort, int page, int pageSize,
			Enums.RelatedEntitiesType relatedEntitiesType)
		{
				IPageDataRequest pageDataRequest = new PageDataRequest(filterCriteria: filterCriteria, sort: sort, page: page, pageSize: pageSize, relatedEntitiesType: relatedEntitiesType);

				var retVal = await GetArtistsAsync(pageDataRequest);
				return retVal;
		}

		public async Task<IHttpCallResultCGHT<IPageDataT<IList<xDTO.Artwork>>>> GetArtworksAsync(IPageDataRequest pageDataRequest)
		{
				List<string> filter = BuildFilter(pageDataRequest.FilterCriteria);

				string requestUrl = $"api/AS/Artwork/{(int)pageDataRequest.RelatedEntitiesType}/";
				var retVal = await SerializationHelper.SerializeCallResultsGet<IList<xDTO.Artwork>>(
					Log, HttpClient, requestUrl,
					filter: filter,
					sort: pageDataRequest.Sort,
					page: pageDataRequest.Page,
					pageSize: pageDataRequest.PageSize);

				return retVal;
		}

		public async Task<IHttpCallResultCGHT<IPageDataT<IList<xDTO.Artwork>>>> GetArtworksAsync(
			bool? isActive, string sort, int page, int pageSize,
			Enums.RelatedEntitiesType relatedEntitiesType)
		{
				List<IFilterCriterion> filterCriteria = new List<IFilterCriterion>();

				var retVal = await GetArtworksAsync(filterCriteria, sort, page, pageSize, relatedEntitiesType);
				return retVal;
		}

		public async Task<IHttpCallResultCGHT<IPageDataT<IList<xDTO.Artwork>>>> GetArtworksAsync(
			List<IFilterCriterion> filterCriteria, string sort, int page, int pageSize,
			Enums.RelatedEntitiesType relatedEntitiesType)
		{
				IPageDataRequest pageDataRequest = new PageDataRequest(filterCriteria: filterCriteria, sort: sort, page: page, pageSize: pageSize, relatedEntitiesType: relatedEntitiesType);

				var retVal = await GetArtworksAsync(pageDataRequest);
				return retVal;
		}

		public async Task<IHttpCallResultCGHT<IPageDataT<IList<xDTO.ArtworkCategoryXref>>>> GetArtworkCategoryXrefsAsync(IPageDataRequest pageDataRequest)
		{
				List<string> filter = BuildFilter(pageDataRequest.FilterCriteria);

				string requestUrl = $"api/AS/ArtworkCategoryXref/{(int)pageDataRequest.RelatedEntitiesType}/";
				var retVal = await SerializationHelper.SerializeCallResultsGet<IList<xDTO.ArtworkCategoryXref>>(
					Log, HttpClient, requestUrl,
					filter: filter,
					sort: pageDataRequest.Sort,
					page: pageDataRequest.Page,
					pageSize: pageDataRequest.PageSize);

				return retVal;
		}

		public async Task<IHttpCallResultCGHT<IPageDataT<IList<xDTO.ArtworkCategoryXref>>>> GetArtworkCategoryXrefsAsync(
			bool? isActive, string sort, int page, int pageSize,
			Enums.RelatedEntitiesType relatedEntitiesType)
		{
				List<IFilterCriterion> filterCriteria = new List<IFilterCriterion>();

				var retVal = await GetArtworkCategoryXrefsAsync(filterCriteria, sort, page, pageSize, relatedEntitiesType);
				return retVal;
		}

		public async Task<IHttpCallResultCGHT<IPageDataT<IList<xDTO.ArtworkCategoryXref>>>> GetArtworkCategoryXrefsAsync(
			List<IFilterCriterion> filterCriteria, string sort, int page, int pageSize,
			Enums.RelatedEntitiesType relatedEntitiesType)
		{
				IPageDataRequest pageDataRequest = new PageDataRequest(filterCriteria: filterCriteria, sort: sort, page: page, pageSize: pageSize, relatedEntitiesType: relatedEntitiesType);

				var retVal = await GetArtworkCategoryXrefsAsync(pageDataRequest);
				return retVal;
		}

		public async Task<IHttpCallResultCGHT<IPageDataT<IList<xDTO.ArtworkMediumXref>>>> GetArtworkMediumXrefsAsync(IPageDataRequest pageDataRequest)
		{
				List<string> filter = BuildFilter(pageDataRequest.FilterCriteria);

				string requestUrl = $"api/AS/ArtworkMediumXref/{(int)pageDataRequest.RelatedEntitiesType}/";
				var retVal = await SerializationHelper.SerializeCallResultsGet<IList<xDTO.ArtworkMediumXref>>(
					Log, HttpClient, requestUrl,
					filter: filter,
					sort: pageDataRequest.Sort,
					page: pageDataRequest.Page,
					pageSize: pageDataRequest.PageSize);

				return retVal;
		}

		public async Task<IHttpCallResultCGHT<IPageDataT<IList<xDTO.ArtworkMediumXref>>>> GetArtworkMediumXrefsAsync(
			bool? isActive, string sort, int page, int pageSize,
			Enums.RelatedEntitiesType relatedEntitiesType)
		{
				List<IFilterCriterion> filterCriteria = new List<IFilterCriterion>();

				var retVal = await GetArtworkMediumXrefsAsync(filterCriteria, sort, page, pageSize, relatedEntitiesType);
				return retVal;
		}

		public async Task<IHttpCallResultCGHT<IPageDataT<IList<xDTO.ArtworkMediumXref>>>> GetArtworkMediumXrefsAsync(
			List<IFilterCriterion> filterCriteria, string sort, int page, int pageSize,
			Enums.RelatedEntitiesType relatedEntitiesType)
		{
				IPageDataRequest pageDataRequest = new PageDataRequest(filterCriteria: filterCriteria, sort: sort, page: page, pageSize: pageSize, relatedEntitiesType: relatedEntitiesType);

				var retVal = await GetArtworkMediumXrefsAsync(pageDataRequest);
				return retVal;
		}

		public async Task<IHttpCallResultCGHT<IPageDataT<IList<xDTO.Category>>>> GetCategoriesAsync(IPageDataRequest pageDataRequest)
		{
				List<string> filter = BuildFilter(pageDataRequest.FilterCriteria);

				string requestUrl = $"api/AS/Category/{(int)pageDataRequest.RelatedEntitiesType}/";
				var retVal = await SerializationHelper.SerializeCallResultsGet<IList<xDTO.Category>>(
					Log, HttpClient, requestUrl,
					filter: filter,
					sort: pageDataRequest.Sort,
					page: pageDataRequest.Page,
					pageSize: pageDataRequest.PageSize);

				return retVal;
		}

		public async Task<IHttpCallResultCGHT<IPageDataT<IList<xDTO.Category>>>> GetCategoriesAsync(
			bool? isActive, string sort, int page, int pageSize,
			Enums.RelatedEntitiesType relatedEntitiesType)
		{
				List<IFilterCriterion> filterCriteria = new List<IFilterCriterion>();

				var retVal = await GetCategoriesAsync(filterCriteria, sort, page, pageSize, relatedEntitiesType);
				return retVal;
		}

		public async Task<IHttpCallResultCGHT<IPageDataT<IList<xDTO.Category>>>> GetCategoriesAsync(
			List<IFilterCriterion> filterCriteria, string sort, int page, int pageSize,
			Enums.RelatedEntitiesType relatedEntitiesType)
		{
				IPageDataRequest pageDataRequest = new PageDataRequest(filterCriteria: filterCriteria, sort: sort, page: page, pageSize: pageSize, relatedEntitiesType: relatedEntitiesType);

				var retVal = await GetCategoriesAsync(pageDataRequest);
				return retVal;
		}

		public async Task<IHttpCallResultCGHT<IPageDataT<IList<xDTO.Medium>>>> GetMediaAsync(IPageDataRequest pageDataRequest)
		{
				List<string> filter = BuildFilter(pageDataRequest.FilterCriteria);

				string requestUrl = $"api/AS/Medium/{(int)pageDataRequest.RelatedEntitiesType}/";
				var retVal = await SerializationHelper.SerializeCallResultsGet<IList<xDTO.Medium>>(
					Log, HttpClient, requestUrl,
					filter: filter,
					sort: pageDataRequest.Sort,
					page: pageDataRequest.Page,
					pageSize: pageDataRequest.PageSize);

				return retVal;
		}

		public async Task<IHttpCallResultCGHT<IPageDataT<IList<xDTO.Medium>>>> GetMediaAsync(
			bool? isActive, string sort, int page, int pageSize,
			Enums.RelatedEntitiesType relatedEntitiesType)
		{
				List<IFilterCriterion> filterCriteria = new List<IFilterCriterion>();

				var retVal = await GetMediaAsync(filterCriteria, sort, page, pageSize, relatedEntitiesType);
				return retVal;
		}

		public async Task<IHttpCallResultCGHT<IPageDataT<IList<xDTO.Medium>>>> GetMediaAsync(
			List<IFilterCriterion> filterCriteria, string sort, int page, int pageSize,
			Enums.RelatedEntitiesType relatedEntitiesType)
		{
				IPageDataRequest pageDataRequest = new PageDataRequest(filterCriteria: filterCriteria, sort: sort, page: page, pageSize: pageSize, relatedEntitiesType: relatedEntitiesType);

				var retVal = await GetMediaAsync(pageDataRequest);
				return retVal;
		}

		public async Task<IHttpCallResultCGHT<IPageDataT<IList<xDTO.NewsItem>>>> GetNewsItemsAsync(IPageDataRequest pageDataRequest)
		{
				List<string> filter = BuildFilter(pageDataRequest.FilterCriteria);

				string requestUrl = $"api/AS/NewsItem/{(int)pageDataRequest.RelatedEntitiesType}/";
				var retVal = await SerializationHelper.SerializeCallResultsGet<IList<xDTO.NewsItem>>(
					Log, HttpClient, requestUrl,
					filter: filter,
					sort: pageDataRequest.Sort,
					page: pageDataRequest.Page,
					pageSize: pageDataRequest.PageSize);

				return retVal;
		}

		public async Task<IHttpCallResultCGHT<IPageDataT<IList<xDTO.NewsItem>>>> GetNewsItemsAsync(
			bool? isActive, string sort, int page, int pageSize,
			Enums.RelatedEntitiesType relatedEntitiesType)
		{
				List<IFilterCriterion> filterCriteria = new List<IFilterCriterion>();

				var retVal = await GetNewsItemsAsync(filterCriteria, sort, page, pageSize, relatedEntitiesType);
				return retVal;
		}

		public async Task<IHttpCallResultCGHT<IPageDataT<IList<xDTO.NewsItem>>>> GetNewsItemsAsync(
			List<IFilterCriterion> filterCriteria, string sort, int page, int pageSize,
			Enums.RelatedEntitiesType relatedEntitiesType)
		{
				IPageDataRequest pageDataRequest = new PageDataRequest(filterCriteria: filterCriteria, sort: sort, page: page, pageSize: pageSize, relatedEntitiesType: relatedEntitiesType);

				var retVal = await GetNewsItemsAsync(pageDataRequest);
				return retVal;
		}

		#endregion

		#region Get By PK

		public async Task<IHttpCallResultCGHT<xDTO.Artist>> GetArtistAsync(
			int artistId, Enums.RelatedEntitiesType relatedEntitiesType)
		{
				var retVal = await SerializationHelper.SerializeCallResultsGet<xDTO.Artist>(Log, HttpClient,
					$"api/AS/Artist/ById/{artistId}/{(int)relatedEntitiesType}");
				return retVal;
		}

		public async Task<IHttpCallResultCGHT<xDTO.Artwork>> GetArtworkAsync(
			int artworkId, Enums.RelatedEntitiesType relatedEntitiesType)
		{
				var retVal = await SerializationHelper.SerializeCallResultsGet<xDTO.Artwork>(Log, HttpClient,
					$"api/AS/Artwork/ById/{artworkId}/{(int)relatedEntitiesType}");
				return retVal;
		}

		public async Task<IHttpCallResultCGHT<xDTO.ArtworkCategoryXref>> GetArtworkCategoryXrefAsync(
			int artworkId, int categoryId, Enums.RelatedEntitiesType relatedEntitiesType)
		{
				var retVal = await SerializationHelper.SerializeCallResultsGet<xDTO.ArtworkCategoryXref>(Log, HttpClient,
					$"api/AS/ArtworkCategoryXref/ById/{artworkId}/{categoryId}/{(int)relatedEntitiesType}");
				return retVal;
		}

		public async Task<IHttpCallResultCGHT<xDTO.ArtworkMediumXref>> GetArtworkMediumXrefAsync(
			int artworkId, int mediumId, Enums.RelatedEntitiesType relatedEntitiesType)
		{
				var retVal = await SerializationHelper.SerializeCallResultsGet<xDTO.ArtworkMediumXref>(Log, HttpClient,
					$"api/AS/ArtworkMediumXref/ById/{artworkId}/{mediumId}/{(int)relatedEntitiesType}");
				return retVal;
		}

		public async Task<IHttpCallResultCGHT<xDTO.Category>> GetCategoryAsync(
			int categoryId, Enums.RelatedEntitiesType relatedEntitiesType)
		{
				var retVal = await SerializationHelper.SerializeCallResultsGet<xDTO.Category>(Log, HttpClient,
					$"api/AS/Category/ById/{categoryId}/{(int)relatedEntitiesType}");
				return retVal;
		}

		public async Task<IHttpCallResultCGHT<xDTO.Medium>> GetMediumAsync(
			int mediumId, Enums.RelatedEntitiesType relatedEntitiesType)
		{
				var retVal = await SerializationHelper.SerializeCallResultsGet<xDTO.Medium>(Log, HttpClient,
					$"api/AS/Medium/ById/{mediumId}/{(int)relatedEntitiesType}");
				return retVal;
		}

		public async Task<IHttpCallResultCGHT<xDTO.NewsItem>> GetNewsItemAsync(
			int newsItemId, Enums.RelatedEntitiesType relatedEntitiesType)
		{
				var retVal = await SerializationHelper.SerializeCallResultsGet<xDTO.NewsItem>(Log, HttpClient,
					$"api/AS/NewsItem/ById/{newsItemId}/{(int)relatedEntitiesType}");
				return retVal;
		}

		#endregion

		#region Create

		public async Task<IHttpCallResultCGHT<xDTO.Artist>> CreateArtistAsync(xDTO.Artist item)
		{
				var retVal = await SerializationHelper.SerializeCallResultsPost<xDTO.Artist>(
					Log, HttpClient,
					$"api/AS/Artist/", item);
				return retVal;
		}

		public async Task<IHttpCallResultCGHT<xDTO.Artwork>> CreateArtworkAsync(xDTO.Artwork item)
		{
				var retVal = await SerializationHelper.SerializeCallResultsPost<xDTO.Artwork>(
					Log, HttpClient,
					$"api/AS/Artwork/", item);
				return retVal;
		}

		public async Task<IHttpCallResultCGHT<xDTO.ArtworkCategoryXref>> CreateArtworkCategoryXrefAsync(xDTO.ArtworkCategoryXref item)
		{
				var retVal = await SerializationHelper.SerializeCallResultsPost<xDTO.ArtworkCategoryXref>(
					Log, HttpClient,
					$"api/AS/ArtworkCategoryXref/", item);
				return retVal;
		}

		public async Task<IHttpCallResultCGHT<xDTO.ArtworkMediumXref>> CreateArtworkMediumXrefAsync(xDTO.ArtworkMediumXref item)
		{
				var retVal = await SerializationHelper.SerializeCallResultsPost<xDTO.ArtworkMediumXref>(
					Log, HttpClient,
					$"api/AS/ArtworkMediumXref/", item);
				return retVal;
		}

		public async Task<IHttpCallResultCGHT<xDTO.Category>> CreateCategoryAsync(xDTO.Category item)
		{
				var retVal = await SerializationHelper.SerializeCallResultsPost<xDTO.Category>(
					Log, HttpClient,
					$"api/AS/Category/", item);
				return retVal;
		}

		public async Task<IHttpCallResultCGHT<xDTO.Medium>> CreateMediumAsync(xDTO.Medium item)
		{
				var retVal = await SerializationHelper.SerializeCallResultsPost<xDTO.Medium>(
					Log, HttpClient,
					$"api/AS/Medium/", item);
				return retVal;
		}

		public async Task<IHttpCallResultCGHT<xDTO.NewsItem>> CreateNewsItemAsync(xDTO.NewsItem item)
		{
				var retVal = await SerializationHelper.SerializeCallResultsPost<xDTO.NewsItem>(
					Log, HttpClient,
					$"api/AS/NewsItem/", item);
				return retVal;
		}

		#endregion

		#region Update

		public async Task<IHttpCallResultCGHT<xDTO.Artist>> UpdateArtistAsync(xDTO.Artist item)
		{
				var retVal = await SerializationHelper.SerializeCallResultsPut<xDTO.Artist>(
					Log, HttpClient,
				$"api/AS/Artist/{item.ArtistId}			", item);
				return retVal;
		}

		public async Task<IHttpCallResultCGHT<xDTO.Artwork>> UpdateArtworkAsync(xDTO.Artwork item)
		{
				var retVal = await SerializationHelper.SerializeCallResultsPut<xDTO.Artwork>(
					Log, HttpClient,
				$"api/AS/Artwork/{item.ArtworkId}			", item);
				return retVal;
		}

		public async Task<IHttpCallResultCGHT<xDTO.ArtworkCategoryXref>> UpdateArtworkCategoryXrefAsync(xDTO.ArtworkCategoryXref item)
		{
				var retVal = await SerializationHelper.SerializeCallResultsPut<xDTO.ArtworkCategoryXref>(
					Log, HttpClient,
				$"api/AS/ArtworkCategoryXref/{item.ArtworkId}/{item.CategoryId}			", item);
				return retVal;
		}

		public async Task<IHttpCallResultCGHT<xDTO.ArtworkMediumXref>> UpdateArtworkMediumXrefAsync(xDTO.ArtworkMediumXref item)
		{
				var retVal = await SerializationHelper.SerializeCallResultsPut<xDTO.ArtworkMediumXref>(
					Log, HttpClient,
				$"api/AS/ArtworkMediumXref/{item.ArtworkId}/{item.MediumId}			", item);
				return retVal;
		}

		public async Task<IHttpCallResultCGHT<xDTO.Category>> UpdateCategoryAsync(xDTO.Category item)
		{
				var retVal = await SerializationHelper.SerializeCallResultsPut<xDTO.Category>(
					Log, HttpClient,
				$"api/AS/Category/{item.CategoryId}			", item);
				return retVal;
		}

		public async Task<IHttpCallResultCGHT<xDTO.Medium>> UpdateMediumAsync(xDTO.Medium item)
		{
				var retVal = await SerializationHelper.SerializeCallResultsPut<xDTO.Medium>(
					Log, HttpClient,
				$"api/AS/Medium/{item.MediumId}			", item);
				return retVal;
		}

		public async Task<IHttpCallResultCGHT<xDTO.NewsItem>> UpdateNewsItemAsync(xDTO.NewsItem item)
		{
				var retVal = await SerializationHelper.SerializeCallResultsPut<xDTO.NewsItem>(
					Log, HttpClient,
				$"api/AS/NewsItem/{item.NewsItemId}			", item);
				return retVal;
		}

		#endregion

		#region Delete

		public async Task<IHttpCallResultCGHT<xDTO.Artist>> DeleteArtistAsync(int artistId)
		{
				var retVal = await SerializationHelper.SerializeCallResultsDelete<xDTO.Artist>(
					Log, HttpClient,
							$"api/AS/Artist/{artistId}");

				return retVal;
		}

		public async Task<IHttpCallResultCGHT<xDTO.Artwork>> DeleteArtworkAsync(int artworkId)
		{
				var retVal = await SerializationHelper.SerializeCallResultsDelete<xDTO.Artwork>(
					Log, HttpClient,
							$"api/AS/Artwork/{artworkId}");

				return retVal;
		}

		public async Task<IHttpCallResultCGHT<xDTO.ArtworkCategoryXref>> DeleteArtworkCategoryXrefAsync(int artworkId, int categoryId)
		{
				var retVal = await SerializationHelper.SerializeCallResultsDelete<xDTO.ArtworkCategoryXref>(
					Log, HttpClient,
							$"api/AS/ArtworkCategoryXref/{artworkId}/{categoryId}");

				return retVal;
		}

		public async Task<IHttpCallResultCGHT<xDTO.ArtworkMediumXref>> DeleteArtworkMediumXrefAsync(int artworkId, int mediumId)
		{
				var retVal = await SerializationHelper.SerializeCallResultsDelete<xDTO.ArtworkMediumXref>(
					Log, HttpClient,
							$"api/AS/ArtworkMediumXref/{artworkId}/{mediumId}");

				return retVal;
		}

		public async Task<IHttpCallResultCGHT<xDTO.Category>> DeleteCategoryAsync(int categoryId)
		{
				var retVal = await SerializationHelper.SerializeCallResultsDelete<xDTO.Category>(
					Log, HttpClient,
							$"api/AS/Category/{categoryId}");

				return retVal;
		}

		public async Task<IHttpCallResultCGHT<xDTO.Medium>> DeleteMediumAsync(int mediumId)
		{
				var retVal = await SerializationHelper.SerializeCallResultsDelete<xDTO.Medium>(
					Log, HttpClient,
							$"api/AS/Medium/{mediumId}");

				return retVal;
		}

		public async Task<IHttpCallResultCGHT<xDTO.NewsItem>> DeleteNewsItemAsync(int newsItemId)
		{
				var retVal = await SerializationHelper.SerializeCallResultsDelete<xDTO.NewsItem>(
					Log, HttpClient,
							$"api/AS/NewsItem/{newsItemId}");

				return retVal;
		}

		#endregion

	}
}
