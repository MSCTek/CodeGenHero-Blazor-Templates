// <auto-generated> - Template:GenericFactory, Version:2021.9.14, Id:6696eda9-ad96-46b4-aa58-1842bc9c2bbd
using AutoMapper;
using System;
using System.Collections.Generic;
using System.Dynamic;
using System.Linq;
using System.Reflection;

namespace ArtistSite.Repository.Mappers
{
public class ASGenericFactory<TEntity, TDto> : IASGenericFactory<TEntity, TDto>
{
private IMapper _mapper;

		public ASGenericFactory(IMapper mapper)
		{
				_mapper = mapper;
		}

		public TDto Create(TEntity item)
		{
				return _mapper.Map<TDto>(item);
		}

		public TEntity Create(TDto item)
		{
				return _mapper.Map<TEntity>(item);
		}

		public object CreateDataShapedObject(TEntity item, List<string> lstOfFields)
		{
				return CreateDataShapedObject(Create(item), lstOfFields);
		}

		public virtual object CreateDataShapedObject(object item, List<string> fieldList)
		{
				if (!fieldList.Any())
				{
						return item;
				}
				else
				{
						ExpandoObject objectToReturn = new ExpandoObject();
						var itemType = item.GetType();
						foreach (var field in fieldList)
						{
								var fieldValue = itemType
									.GetProperty(field, BindingFlags.IgnoreCase | BindingFlags.Public | BindingFlags.Instance)
									.GetValue(item, null);

								((IDictionary<String, Object>)objectToReturn).Add(field, fieldValue);
						}

				return objectToReturn;
				}
		}
	}
}
