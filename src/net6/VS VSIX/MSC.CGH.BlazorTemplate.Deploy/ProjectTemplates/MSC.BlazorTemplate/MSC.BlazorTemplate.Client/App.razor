@using $ext_safeprojectname$.App.Shared
@using $ext_safeprojectname$.App.ViewModels
@using Microsoft.AspNetCore.Components.Routing

@inject $ext_safeprojectname$.App.Services.ITokenProvider TokenProvider

@code {
	[Parameter]
	public $ext_safeprojectname$.App.Services.InitialApplicationState InitialState { get; set; }

	protected override Task OnInitializedAsync()
	{
		if (TokenProvider != null && InitialState != null)
		{	// For server side: See how this is handled in $ext_safeprojectname$\src\Server\Pages\_Host.cshtml
			Console.WriteLine($"TokenProvider is being set to initial state in {nameof(OnInitializedAsync)}.");
			TokenProvider.XsrfToken = InitialState.XsrfToken;
			TokenProvider.AccessToken = InitialState.AccessToken;
			TokenProvider.RefreshToken = InitialState.RefreshToken;
			TokenProvider.ExpiresAt = InitialState.ExpiresAt;
		}
		else
		{
			Console.WriteLine($"TokenProvider is null in {nameof(OnInitializedAsync)}");
		}

		return base.OnInitializedAsync();
	}
}
<CascadingAuthenticationState>
	<Router AppAssembly="@typeof(MainLayoutViewModel).Assembly" PreferExactMatches="@true" 
		AdditionalAssemblies="new[] { typeof($safeprojectname$.Program).Assembly }">
		<Found Context="routeData">
			<AuthorizeRouteView RouteData="@routeData" DefaultLayout="@typeof(MainLayout)">
				<NotAuthorized>
					<RedirectToLogin />
				</NotAuthorized>
			</AuthorizeRouteView>
		</Found>
		<NotFound>
			<LayoutView Layout="@typeof(MainLayout)">
				<p>Sorry, there's nothing at this address.</p>
			</LayoutView>
		</NotFound>
	</Router>
</CascadingAuthenticationState>
